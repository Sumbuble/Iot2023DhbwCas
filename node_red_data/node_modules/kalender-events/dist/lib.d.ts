import { Config } from './interfaces/config';
import { IKalenderEvent } from './interfaces';
export interface Job {
    id: string;
    cronjob: any;
}
export declare class KalenderEvents {
    private cache;
    private config;
    constructor(config?: Config);
    private calcPrePastView;
    /**
    * @param date Date, eg. new Date()
    * @param args offset either in minutes or as value and type (seconds, minutes, hours, days)
    * ```
    * example:
    * let ke = new KalenderEvents();
    * ke.addOffset(new Date(), 10, 'hours') // adds 10 hours
    * ke.addOffset(new Date(), 10) // adds 10 minutes
    * ```
    */
    addOffset(date: Date, ...args: any): Date;
    /**
    * calculates the countdown to ``date``
    * @param date Date, eg. new Date()
    * ```
    * example:
    * let ke = new KalenderEvents();
    * let countdown = ke.countdown(ke.addOffset(new Date(), 10))
    *
    * console.log(countdown)
    * -->
    * {
    *  days: 0,
    *  hours: 0,
    *  minutes: 10,
    *  seconds: 0,
    * }
    *
    * ```
    */
    countdown(date: Date): {
        days: number;
        hours: number;
        minutes: number;
        seconds: number;
    };
    getEvents(config?: Config): Promise<IKalenderEvent[]>;
    private getCal;
    private processRRule;
    private processData;
    private processDataRev;
    private filterOutput;
    private checkRegex;
    private checkDates;
}
export declare function getVersion(): Promise<string>;
